// Code generated by protoc-gen-go. DO NOT EDIT.
// source: committer.proto

package committer

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommitterRequest struct {
	Language             string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitterRequest) Reset()         { *m = CommitterRequest{} }
func (m *CommitterRequest) String() string { return proto.CompactTextString(m) }
func (*CommitterRequest) ProtoMessage()    {}
func (*CommitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87217c465df5a3ac, []int{0}
}

func (m *CommitterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitterRequest.Unmarshal(m, b)
}
func (m *CommitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitterRequest.Marshal(b, m, deterministic)
}
func (m *CommitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitterRequest.Merge(m, src)
}
func (m *CommitterRequest) XXX_Size() int {
	return xxx_messageInfo_CommitterRequest.Size(m)
}
func (m *CommitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitterRequest proto.InternalMessageInfo

func (m *CommitterRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type CommitterResponse struct {
	Language             string       `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Contributors         []*Committer `protobuf:"bytes,2,rep,name=contributors,proto3" json:"contributors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CommitterResponse) Reset()         { *m = CommitterResponse{} }
func (m *CommitterResponse) String() string { return proto.CompactTextString(m) }
func (*CommitterResponse) ProtoMessage()    {}
func (*CommitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87217c465df5a3ac, []int{1}
}

func (m *CommitterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitterResponse.Unmarshal(m, b)
}
func (m *CommitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitterResponse.Marshal(b, m, deterministic)
}
func (m *CommitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitterResponse.Merge(m, src)
}
func (m *CommitterResponse) XXX_Size() int {
	return xxx_messageInfo_CommitterResponse.Size(m)
}
func (m *CommitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitterResponse proto.InternalMessageInfo

func (m *CommitterResponse) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *CommitterResponse) GetContributors() []*Committer {
	if m != nil {
		return m.Contributors
	}
	return nil
}

type Committer struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Commits              string   `protobuf:"bytes,2,opt,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Committer) Reset()         { *m = Committer{} }
func (m *Committer) String() string { return proto.CompactTextString(m) }
func (*Committer) ProtoMessage()    {}
func (*Committer) Descriptor() ([]byte, []int) {
	return fileDescriptor_87217c465df5a3ac, []int{2}
}

func (m *Committer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Committer.Unmarshal(m, b)
}
func (m *Committer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Committer.Marshal(b, m, deterministic)
}
func (m *Committer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committer.Merge(m, src)
}
func (m *Committer) XXX_Size() int {
	return xxx_messageInfo_Committer.Size(m)
}
func (m *Committer) XXX_DiscardUnknown() {
	xxx_messageInfo_Committer.DiscardUnknown(m)
}

var xxx_messageInfo_Committer proto.InternalMessageInfo

func (m *Committer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Committer) GetCommits() string {
	if m != nil {
		return m.Commits
	}
	return ""
}

func init() {
	proto.RegisterType((*CommitterRequest)(nil), "committer.v1alpha1.CommitterRequest")
	proto.RegisterType((*CommitterResponse)(nil), "committer.v1alpha1.CommitterResponse")
	proto.RegisterType((*Committer)(nil), "committer.v1alpha1.Committer")
}

func init() { proto.RegisterFile("committer.proto", fileDescriptor_87217c465df5a3ac) }

var fileDescriptor_87217c465df5a3ac = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0xcf, 0xcd,
	0xcd, 0x2c, 0x29, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x42, 0x08, 0x94,
	0x19, 0x26, 0xe6, 0x14, 0x64, 0x24, 0x1a, 0x4a, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea,
	0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43,
	0x74, 0x28, 0xe9, 0x71, 0x09, 0x38, 0xc3, 0xf4, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x49, 0x71, 0x71, 0xe4, 0x24, 0xe6, 0xa5, 0x97, 0x26, 0xa6, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0xc1, 0xf9, 0x4a, 0x45, 0x5c, 0x82, 0x48, 0xea, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0xf1, 0x69, 0x10, 0x72, 0xe4, 0xe2, 0x49, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0x4c, 0x2a, 0x2d, 0xc9,
	0x2f, 0x2a, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd5, 0xc3, 0x74, 0xa9, 0x1e, 0xc2,
	0x60, 0x14, 0x2d, 0x4a, 0x96, 0x5c, 0x9c, 0x70, 0x29, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0x5c,
	0x98, 0x3d, 0x60, 0xb6, 0x90, 0x04, 0x17, 0x3b, 0xc4, 0x38, 0x90, 0xf1, 0x20, 0x61, 0x18, 0xd7,
	0x68, 0x32, 0x23, 0x92, 0xff, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xea, 0xb9, 0x84,
	0x7d, 0xf3, 0x8b, 0x4b, 0x1c, 0x93, 0x4b, 0x32, 0xcb, 0x52, 0x11, 0x26, 0xab, 0xe0, 0x77, 0x13,
	0x24, 0x70, 0xa4, 0x54, 0x09, 0xa8, 0x82, 0x04, 0x89, 0x92, 0x74, 0xd3, 0xe5, 0x27, 0x93, 0x99,
	0x44, 0x85, 0x84, 0xf5, 0x61, 0x8a, 0xf4, 0xe1, 0xfa, 0x9c, 0xb8, 0xa3, 0x38, 0xe1, 0x9c, 0x24,
	0x36, 0x70, 0x44, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x9a, 0x9e, 0x3e, 0xcd, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommitterServiceClient is the client API for CommitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitterServiceClient interface {
	// SendMail
	MostActiveCommitter(ctx context.Context, in *CommitterRequest, opts ...grpc.CallOption) (*CommitterResponse, error)
}

type committerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommitterServiceClient(cc *grpc.ClientConn) CommitterServiceClient {
	return &committerServiceClient{cc}
}

func (c *committerServiceClient) MostActiveCommitter(ctx context.Context, in *CommitterRequest, opts ...grpc.CallOption) (*CommitterResponse, error) {
	out := new(CommitterResponse)
	err := c.cc.Invoke(ctx, "/committer.v1alpha1.CommitterService/MostActiveCommitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitterServiceServer is the server API for CommitterService service.
type CommitterServiceServer interface {
	// SendMail
	MostActiveCommitter(context.Context, *CommitterRequest) (*CommitterResponse, error)
}

func RegisterCommitterServiceServer(s *grpc.Server, srv CommitterServiceServer) {
	s.RegisterService(&_CommitterService_serviceDesc, srv)
}

func _CommitterService_MostActiveCommitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitterServiceServer).MostActiveCommitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/committer.v1alpha1.CommitterService/MostActiveCommitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitterServiceServer).MostActiveCommitter(ctx, req.(*CommitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommitterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "committer.v1alpha1.CommitterService",
	HandlerType: (*CommitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MostActiveCommitter",
			Handler:    _CommitterService_MostActiveCommitter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "committer.proto",
}
